use std.io
use std.arena
use src.parser

const SCOPE_CAP = 1024
const BINDINGS_CAP = 1024
const TAPE_CAP = 1024

fn usage(f *File) {
   f << "Usage:\n"
   f << "  sutakku CMD FILE\n"
   f << "Commands:\n"
   f << "  help          Print this help and exit\n"
   f << "  run           Run the program\n"
   f << "  expand        Expand all program rules\n"
}

let args_start int

fn arg_next(name Str) Str {
   if args_start == argc {
      usage(&stderr)
      &stderr << "\nerror: " << name << " not provided\n"
      exit(1)
   }

   args_start += 1
   return str_from_cstr(argv[args_start - 1])
}

fn type_contains_expr(type Node_Index, expr Node_Index) bool {
   if nodes[type].token.str == "Integer" {
      return nodes[expr].token.kind == TOKEN_INTEGER
   }
   return node_list_find(nodes[type].nodes[NODE_TYPE_EXPRS], expr)
}

fn expr_equals(a Node_Index, b Node_Index) bool {
   if nodes[a].kind != nodes[b].kind { return false }
   match nodes[a].kind {
      NODE_ATOM => return nodes[a].token.str == nodes[b].token.str
      NODE_LIST => {
         let a_element = nodes[a].nodes[NODE_LIST_ELEMENTS]
         let b_element = nodes[b].nodes[NODE_LIST_ELEMENTS]
         for a_element != 0 && b_element != 0 {
            if !expr_equals(a_element, b_element) {
               return false
            }
            a_element = nodes[a_element].next
            b_element = nodes[b_element].next
         }
         return a_element == 0 && b_element == 0
      }
      else => assert false
   }
   return false
}

let arena = arena_new()

fn str_from_expr(expr Node_Index) Str {
   match nodes[expr].kind {
      NODE_ATOM => return nodes[expr].token.str
      NODE_LIST => {
         &arena << "("
         for let element = nodes[expr].nodes[NODE_LIST_ELEMENTS], element != 0, element = nodes[element].next {
            &arena << str_from_expr(element)
            if nodes[element].next != 0 {
               &arena << " "
            }
         }
         &arena << ")"
         let str = str_from_arena(arena)
         arena.size = 0
         return str
      }
      else => assert false
   }
   return ""
}

fn expr_find_atom(expr Node_Index, name Node_Index, atom *Node_Index) bool {
   match nodes[expr].kind {
      NODE_ATOM => {
         if expr_equals(expr, name) {
            *atom = expr
            return true
         }
      }
      NODE_LIST => {
         for let element = nodes[expr].nodes[NODE_LIST_ELEMENTS], element != 0, element = nodes[element].next {
            if expr_find_atom(element, name, atom) {
               return true
            }
         }
      }
      else => assert false
   }
   return false
}

fn expr_substitute(expr Node_Index, name Node_Index, symbol Node_Index) Node_Index {
   match nodes[expr].kind {
      NODE_ATOM => return node_new(NODE_ATOM, if(expr_equals(expr, name), nodes[symbol].token, nodes[expr].token))
      NODE_LIST => {
         let new = node_new(NODE_LIST, nodes[expr].token)
         let new_elements = &nodes[new].nodes[NODE_LIST_ELEMENTS]
         for let element = nodes[expr].nodes[NODE_LIST_ELEMENTS], element != 0, element = nodes[element].next {
            new_elements = node_list_push(new_elements, expr_substitute(element, name, symbol))
         }
         return new
      }
      else => assert false
   }
   return 0
}

struct Scope {
   data [SCOPE_CAP]Node_Index
   count int
}

fn scope_remove(scope *Scope, index int) {
   scope.count -= 1
   for let i = index, i < scope.count, i += 1 {
      scope.data[i] = scope.data[i + 1]
   }
}

fn scope_find(scope *Scope, name Node_Index, index *int) bool {
   for let i = 0, i < scope.count, i += 1 {
      if nodes[nodes[scope.data[i]].nodes[NODE_VAR_NAME]].token.str == nodes[name].token.str {
         *index = i
         return true
      }
   }
   return false
}

struct Binding {
   name Node_Index
   value int
}

struct Bindings {
   data [BINDINGS_CAP]Binding
   count int
}

fn bindings_find(bindings *Bindings, name Node_Index, index *int) bool {
   for let i = 0, i < bindings.count, i += 1 {
      if expr_equals(bindings.data[i].name, name) {
         *index = i
         return true
      }
   }
   return false
}

fn expr_pattern_match(name Node_Index, value Node_Index, scope *Scope, bindings *Bindings) bool {
   if nodes[name].kind == NODE_ATOM {
      let index int
      if scope_find(scope, name, &index) {
         let index int
         if bindings_find(bindings, name, &index) {
            return expr_equals(bindings.data[index].value, value)
         } else {
            bindings.data[bindings.count].name = name
            bindings.data[bindings.count].value = value
            bindings.count += 1
            return true
         }
      } else {
         return expr_equals(name, value)
      }
   } else if nodes[name].kind == NODE_LIST && nodes[name].kind == NODE_LIST {
      let a = nodes[name].nodes[NODE_LIST_ELEMENTS]
      let b = nodes[value].nodes[NODE_LIST_ELEMENTS]
      for a != 0 && b != 0 {
         if !expr_pattern_match(a, b, scope, bindings) {
            return false
         }
         a = nodes[a].next
         b = nodes[b].next
      }
      return a == 0 && b == 0
   }
   return false
}

fn stmt_substitute(stmt Node_Index, name Node_Index, symbol Node_Index) Node_Index {
   match nodes[stmt].kind {
      NODE_BLOCK => {
         let new = node_new(NODE_BLOCK, nodes[stmt].token)
         let new_stmts = &nodes[new].nodes[NODE_BLOCK_STMTS]
         for let stmt = nodes[stmt].nodes[NODE_BLOCK_STMTS], stmt != 0, stmt = nodes[stmt].next {
            new_stmts = node_list_push(new_stmts, stmt_substitute(stmt, name, symbol))
         }
         return new
      }
      NODE_VAR => {
         let new = node_new(NODE_VAR, nodes[stmt].token)
         nodes[new].nodes[NODE_VAR_NAME] = nodes[stmt].nodes[NODE_VAR_NAME]
         nodes[new].nodes[NODE_VAR_TYPE] = nodes[stmt].nodes[NODE_VAR_TYPE]
         nodes[new].nodes[NODE_VAR_BODY] = stmt_substitute(nodes[stmt].nodes[NODE_VAR_BODY], name, symbol)
         return new
      }
      NODE_RULE => {
         let new = node_new(NODE_RULE, nodes[stmt].token)
         nodes[new].nodes[NODE_RULE_STATE] = expr_substitute(nodes[stmt].nodes[NODE_RULE_STATE], name, symbol)
         nodes[new].nodes[NODE_RULE_READ] = expr_substitute(nodes[stmt].nodes[NODE_RULE_READ], name, symbol)
         nodes[new].nodes[NODE_RULE_WRITE] = expr_substitute(nodes[stmt].nodes[NODE_RULE_WRITE], name, symbol)
         nodes[new].nodes[NODE_RULE_ACTION] = expr_substitute(nodes[stmt].nodes[NODE_RULE_ACTION], name, symbol)
         nodes[new].nodes[NODE_RULE_NEXT] = expr_substitute(nodes[stmt].nodes[NODE_RULE_NEXT], name, symbol)
         return new
      }
      else => assert false
   }
   return 0
}

struct Triple {
   write Node_Index
   action Node_Index
   next Node_Index
}

fn stmt_type_check(stmt Node_Index, state Node_Index, read Node_Index, scope *Scope, triple *Triple) bool {
   match nodes[stmt].kind {
      NODE_BLOCK => {
         for let stmt = nodes[stmt].nodes[NODE_BLOCK_STMTS], stmt != 0, stmt = nodes[stmt].next {
            if stmt_type_check(stmt, state, read, scope, triple) {
               return true
            }
         }
         return false
      }
      NODE_VAR => {
         let index int
         if scope_find(scope, nodes[stmt].nodes[NODE_VAR_NAME], &index) {
            &stderr << nodes[nodes[stmt].nodes[NODE_VAR_NAME]].token.pos << "error: '" << str_from_expr(nodes[stmt].nodes[NODE_VAR_NAME]) << "' shadows another name in the higher scope\n"
            &stderr << nodes[nodes[scope.data[index]].nodes[NODE_VAR_NAME]].token.pos << "note: the shadowed name is located here\n"
            exit(1)
         }
         let var = scope.count
         scope.data[scope.count] = stmt
         scope.count += 1
         let result = stmt_type_check(nodes[stmt].nodes[NODE_VAR_BODY], state, read, scope, triple)
         scope_remove(scope, var)
         return result
      }
      NODE_RULE => {
         let bindings Bindings
         bindings.count = 0
         if !expr_pattern_match(nodes[stmt].nodes[NODE_RULE_STATE], state, scope, &bindings) {
            return false
         }
         if !expr_pattern_match(nodes[stmt].nodes[NODE_RULE_READ], read, scope, &bindings) {
            return false
         }
         triple.write = nodes[stmt].nodes[NODE_RULE_WRITE]
         triple.action = nodes[stmt].nodes[NODE_RULE_ACTION]
         triple.next = nodes[stmt].nodes[NODE_RULE_NEXT]
         for let i = 0, i < scope.count, i += 1 {
            let index int
            if bindings_find(&bindings, nodes[scope.data[i]].nodes[NODE_VAR_NAME], &index) {
               if type_contains_expr(nodes[scope.data[i]].nodes[NODE_VAR_TYPE], bindings.data[index].value) {
                  triple.write = expr_substitute(triple.write, nodes[scope.data[i]].nodes[NODE_VAR_NAME], bindings.data[index].value)
                  triple.action = expr_substitute(triple.action, nodes[scope.data[i]].nodes[NODE_VAR_NAME], bindings.data[index].value)
                  triple.next = expr_substitute(triple.next, nodes[scope.data[i]].nodes[NODE_VAR_NAME], bindings.data[index].value)
               } else {
                  return false
               }
            } else {
               let atom int
               if expr_find_atom(nodes[stmt].nodes[NODE_RULE_WRITE], nodes[scope.data[i]].nodes[NODE_VAR_NAME], &atom) || expr_find_atom(nodes[stmt].nodes[NODE_RULE_ACTION], nodes[scope.data[i]].nodes[NODE_VAR_NAME], &atom) || expr_find_atom(nodes[stmt].nodes[NODE_RULE_NEXT], nodes[scope.data[i]].nodes[NODE_VAR_NAME], &atom) {
                  &stderr << nodes[atom].token.pos << "error: ambiguous use of variable '" << nodes[atom].token.str << "'\n"
                  &stderr << nodes[nodes[stmt].nodes[NODE_RULE_STATE]].token.pos << "note: to make it unambiguous it must be used here\n"
                  &stderr << nodes[nodes[stmt].nodes[NODE_RULE_READ]].token.pos << "note: or here\n"
                  exit(1)
               } else {
                  &stderr << nodes[nodes[scope.data[i]].nodes[NODE_VAR_NAME]].token.pos << "warning: unused variable '" << str_from_expr(nodes[scope.data[i]].nodes[NODE_VAR_NAME]) << "'\n"
               }
            }
         }
         return true
      }
      else => assert false
   }
   return false
}

fn stmt_expand(stmt Node_Index) {
   match nodes[stmt].kind {
      NODE_BLOCK => {
         for let stmt = nodes[stmt].nodes[NODE_BLOCK_STMTS], stmt != 0, stmt = nodes[stmt].next {
            stmt_expand(stmt)
         }
      }
      NODE_VAR => {
         for let expr = nodes[nodes[stmt].nodes[NODE_VAR_TYPE]].nodes[NODE_TYPE_EXPRS], expr != 0, expr = nodes[expr].next {
            stmt_expand(stmt_substitute(nodes[stmt].nodes[NODE_VAR_BODY], nodes[stmt].nodes[NODE_VAR_NAME], expr))
         }
      }
      NODE_RULE => {
         &stdout << "rule " << str_from_expr(nodes[stmt].nodes[NODE_RULE_STATE]) << " " << str_from_expr(nodes[stmt].nodes[NODE_RULE_READ]) << " " << str_from_expr(nodes[stmt].nodes[NODE_RULE_WRITE]) << " " << str_from_expr(nodes[stmt].nodes[NODE_RULE_ACTION]) << " " << str_from_expr(nodes[stmt].nodes[NODE_RULE_NEXT]) << "\n"
      }
      else => assert false
   }
}

struct Machine {
   state Node_Index
   tape [TAPE_CAP]Node_Index
   tape_count int
   tape_default Node_Index
   head int
   halt bool
}

fn machine_print(machine *Machine) {
   for let i = 0, i < machine.tape_count, i += 1 {
      &stdout << str_from_expr(machine.tape[i]) << " "
   }
   &stdout << "\n"
}

let arena = arena_new()

fn machine_trace(machine *Machine) {
   arena.size = 0
   &arena << str_from_expr(machine.state) << ": "
   let head = 0
   for let i = 0, i < machine.tape_count, i += 1 {
      if i == machine.head {
         head = arena.size
      }
      &arena << str_from_expr(machine.tape[i]) << " "
   }
   &stdout << str_from_arena(arena) << '\n'
   for let i = 0, i < head, i += 1 { &stdout << ' ' }
   &stdout << "^\n"
}

fn machine_step(machine *Machine) {
   for let i = 0, i < stmts_count, i += 1 {
      let scope Scope
      scope.count = 0
      let triple Triple
      if stmt_type_check(stmts[i], machine.state, machine.tape[machine.head], &scope, &triple) {
         machine.tape[machine.head] = triple.write
         if nodes[triple.action].token.str == "<-" {
            if machine.head == 0 {
               &stderr << nodes[triple.action].token.pos << "error: tape underflow\n"
               exit(1)
            }
            machine.head -= 1
         } else if nodes[triple.action].token.str == "->" {
            machine.head += 1
            if machine.head >= machine.tape_count {
               machine.tape[machine.tape_count] = machine.tape_default
               machine.tape_count += 1
            }
         } else if nodes[triple.action].token.str == "." {
         } else if nodes[triple.action].token.str == "!" {
            machine_print(machine)
         } else {
            &stderr << nodes[triple.action].token.pos << "error: action must be '<-' or '->'\n"
            exit(1)
         }
         machine.state = triple.next
         machine.halt = false
         break
      }
   }
}

fn mode_run(path Str) {
   lexer_open(path.data)

   for !lexer_read(TOKEN_EOF) {
      let stmt = parse_stmt()
      if nodes[stmt].kind == NODE_RUN {
         if nodes[stmt].token.data as bool {
            &stdout << nodes[stmt].token.pos << "\n"
         }

         let machine Machine
         machine.state = nodes[stmt].nodes[NODE_RUN_STATE]
         machine.tape_count = 0
         machine.head = 0
         machine.halt = false

         for let expr = nodes[stmt].nodes[NODE_RUN_TAPE], expr != 0, expr = nodes[expr].next {
            machine.tape[machine.tape_count] = expr
            machine.tape_count += 1
            if nodes[expr].next == 0 {
               machine.tape_default = expr
            }
         }

         for !machine.halt {
            if nodes[stmt].token.data as bool {
               machine_trace(&machine)
            }
            machine.halt = true
            machine_step(&machine)
         }
      }
   }
}

fn mode_expand(path Str) {
   lexer_open(path.data)

   for !lexer_read(TOKEN_EOF) {
      let stmt = parse_stmt()
      match nodes[stmt].kind {
         NODE_BLOCK, NODE_VAR, NODE_RULE => stmt_expand(stmt)
         NODE_RUN => {
            if nodes[stmt].token.data as bool {
               &stdout << "trace "
            } else {
               &stdout << "run "
            }

            &stdout << str_from_expr(nodes[stmt].nodes[NODE_RUN_STATE]) << " { "
            for let expr = nodes[stmt].nodes[NODE_RUN_TAPE], expr != 0, expr = nodes[expr].next {
               &stdout << str_from_expr(expr) << " "
            }
            &stdout << "}"
         }
      }
   }
}

fn main() {
   let command = arg_next("command")
   if command == "help" {
      usage(&stdout)
      exit(0)
   } else if command == "run" {
      mode_run(arg_next("file"))
   } else if command == "expand" {
      mode_expand(arg_next("file"))
   } else {
      usage(&stderr)
      &stderr << "\nerror: invalid command '" << command << "'\n"
      exit(1)
   }
}
